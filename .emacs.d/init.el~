;;;; Emacs Setting File ;;;;;

;;; load-path の設定
;; if using emacs23 or before
(when (< emacs-major-version 23)
  (defvar user-emacs-directory "~/.emacs.d/"))

;; subdirectory も自動で追加する関数
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
              (expand-file-name (concat user-emacs-directory path))))
        (add-to-list 'load-path default-directory)
        (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
            (normal-top-level-add-subdirs-to-load-path))))))

;; add arguments' directory & subdirectory to the load-path
(add-to-load-path "elisp" "elpa" "conf")

;;; ELPA
(require 'package)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list 'package-archives ''("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;;; ELPAなどで自動で追加される設定をcustom.elに書き込む
(setq custom-file (locate-user-emacs-file "custom.el"))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)


;;; global key map settings
(define-key global-map (kbd "C-m") 'newline-and-indent)      ; 改行して indent する
(define-key global-map (kbd "C-c l") 'toggle-truncate-lines) ; 行を折り返すかを切り換える
(define-key global-map (kbd "C-t") 'other-window)            ; window の切替


;;; Frame settings (見た目の設定)

;; standard mode line setting
(column-number-mode t)             ; column 番号も表示
(size-indication-mode t)           ; file size を表示
(setq display-time-day-and-date t) ; 曜日,月,日を表示
(setq display-time-24hr-format t)  ; 24時間表示
(display-time-mode t)

;; extensional mode line setting
;; region選択時に行数と文字数を表示する
(defun count-lines-and-chars ()
  (if mark-active
      (format "(%d lines,%d chars) "
              (count-lines (region-beginning) (region-end))
              (- (region-end) (region-beginning)))
    ""))
(add-to-list 'mode-line-format
             '(:eval (count-lines-and-chars)))

;; title bar setting
(setq frame-title-format "%@%f") ; title bar に表示する文字列


;;; Theme
;(load-theme 'zenburn t)


;;; Indent settings
(setq-default tab-width 4)          ; default の tab の表示幅
(setq-default indent-tabs-mode nil) ; indent に tab文字を使用しない
;; defaultのIndent Style を設定. M-x describe-variable RET c-style-alist RET で詳細表示
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-style "whitesmith")))


;;; Highlight settings
;; 現在行の Highlight
(defface my-hl-line-face
  '((((class color) (background dark))  ; 背景がdarkの場合、背景色を紺にする
     (:background "NavyBlue" t))
    (((class color) (backgorund light)) ; 背景がligthの場合、背景色を青にする
     (:backgorund "LightSkyBlue" t))
    (t (:bold t)))
  "hl-line's my face")
(setq hl-line-face 'my-hl-line-face)
(global-hl-line-mode t)

;; 対応する括弧を強調表示
(setq show-paren-delay 0)                    ; 表示するまでの秒数
(show-paren-mode t)                          ; 有効化
(setq show-paren-style 'expression)          ; expression は括弧内も強調表示
(set-face-attribute 'show-paren-match nil
                    :background 'unspecified ; background の色
                    :underline "yellow")     ; 下線の色


;;; Backup and Auto save setting
;; if you want to recover "init.el" from auto save file, run below command.
;; M-x recover-file RET ~/.emacs.d/init.el RET
(add-to-list 'backup-directory-alist
             (cons "." "~/.emacs.d/backups/"))              ; backup の保存 directory を設定
(setq auto-save-file-name-transforms
      `((".*",(expand-file-name "~/.emacs.d/backups/") t))) ; autosave の保存 directory を設定
(setq auto-save-timeout 15)                                 ; auto save file を作成するまでの秒間隔
(setq auto-save-interval 60)                                ; auto save file を作成するまでの type 間隔


;;; 変更されたfileの自動更新
(global-auto-revert-mode t)


;;; Hook
;; after save hook
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p) ; fileが!#で初まる場合、+x を付けて保存

;; emacs lisp mode hook
;; Elisp 関数や変数の情報を echo area に表示
(defun elisp-mode-hooks () "lisp-mode-hooks"
       (when (require 'eldoc nil t)
         (setq eldoc-idle-delay 0.2)
         (setq eldoc-echo-area-use-multiline-p t)
         (turn-on-eldoc-mode)))
(add-hook 'emacs-lisp-mode-hook 'elisp-mode-hooks)



